#!/usr/bin/env bash
# ############################################################################
# # PATH: /opt/local/config/rc/bash               AUTHOR: Hoefkens.j@gmail.com
# # FILE: 311_history.conf                                 2023-04-04 09:33:40
# ############################################################################
#
# set -o xtrace
function bash_history() {
    function HELP() {
        echo -e "\nUsage: bash_history [option]\n"
        echo -e "Options:"
        echo -e "  install\tCreate the necessary directories and files for the history tracking"
        echo -e "  clean\t\tRemove the current session's history and reset the command history"
        echo -e "  start\t\tStart a new session and begin tracking commands"
        echo -e "  stop\t\tStop the current session and stop tracking commands"
        echo -e "  show [--all]\tDisplay the command history, use --all to show all history"
        echo -e "  active\tList active history sessions"
        echo -e "  orphaned\tList orphaned history sessions"
        echo -e "  help\t\tDisplay this help message\n"
        echo -e "Example: bash_history start\n"
    }

	function history_install()	{
		[[ ! -d "$HISTDIR" 			  ]]	&& install -m 777 -d "$HISTDIR" || printf '%s Found: Skipping' "$HISTDIR"
		[[ ! -f "$HISTSYSFULL" 		]]	&& install -m 777 /dev/null "$HISTSYSFULL" || printf '\n%s Found: Skipping' "$HISTSYSFULL"
		[[ ! -f "$HISTSYSUNIQ"		]]	&& install -m 777 /dev/null "$HISTSYSUNIQ" || printf '\n%s Found: Skipping' "$HISTSYSUNIQ"
		[[ ! -f "$HISTSYSBOOT"    ]]  && install -m 777 /dev/null "$HISTSYSBOOT" || printf '\n%s Found: Skipping' "$HISTSYSBOOT"
		[[ ! -f "$HISTSYSBOOT"    ]]  && install -m 777 /dev/null "$HISTLASTCMD" || printf '\n%s Found: Skipping' "$HISTLASTCMD"
		sudo chmod -R 777 "$HISTDIR"
	}
	function history_cleanup() {
		local ACTIVEHISTFILES ACTIVESESSIONFILES
		# get orphaned files:
		local ACTIVE PATTERN HISTACTIVE
		ACTIVE=$(pgrep "$(ps -p $$ -o comm=)")
		PATTERN=$(for pid in $ACTIVE; do echo -n "-e .*(system|${pid}).* "; done)
		HISTACTIVE=$(ls $HISTDIR 2>/dev/null | grep -v $PATTERN|sort)
		for f in $HISTACTIVE; do
			printf '%s\n ' "$HISTDIR/$f"		
			# cat "$f" >> $HISTSYSFULL
			# trash -v "$f"
		done

	}


	function history_session_prep()	{
		[[ -f "$HISTSESSION" ]]	&& cat "$HISTSESSION" >> "$HISTSYSFULL"
		[[ ! -f "$HISTSESSION" ]] && install -m 777 /dev/null "$HISTSESSION"
		install -m 777 /dev/null "$HISTFILE"
		[[ ! -f "$HISTSYSBOOT" ]] && 	install -m 777 /dev/null "$HISTSYSBOOT"
	}
	function history_session_start()	{
		local STAMP
		history_session_prep
		echo "$( $__FNC stamp)" >> "$HISTSYSFULL"
		# $__FNC uniq "${HISTSYSFULL}" > "$HISTSYSUNIQ"
		touch $HISTSESSION
		touch $HISTFILE
		cat "$HISTSYSBOOT" > "$HISTFILE"
		builtin history -r "$HISTFILE"
	}
	function history_session_stop ()	{
		rm $HISTFILE 2>/dev/null
		rm $HISTSESSION 2>/dev/null
	}	
	function history_update()	{
		builtin history -a "$HISTLASTCMD"
		cat "$HISTLASTCMD" >> "$HISTSESSION"
		cat "$HISTLASTCMD" >>	"$HISTSYSFULL"
		cat "$HISTLASTCMD" >> "$HISTSYSBOOT"
		builtin history -c	
		cat "$HISTSYSBOOT" > "$HISTSYSUNIQ"
		cat "$HISTSESSION" >> "$HISTSYSUNIQ"
		cat "$HISTSYSUNIQ" | history_uniq > "$HISTFILE"
 		builtin history -r "$HISTFILE"

	}
	function history_uniq()	{
		tac  | awk '!seen[$0]++'  | tac |tee 
		# awk '{ lines[NR] = $0 } END { for(i=NR;i>=1;i--) if(!seen[lines[i]]++) rev[++j] = lines[i]; for(k=j;k>=1;k--) print rev[k] }' "$1" 
	}
	function history_active(){
		local ACTIVE PATTERN HISTACTIVE
		function history_sessions_active ()	{
			ACTIVE=$(pgrep "$(ps -p $$ -o comm=)")
			PATTERN=$(for pid in $ACTIVE; do echo -n "-e .*session*\.${pid}.* "; done)
			HISTACTIVE=$(ls $HISTDIR 2>/dev/null | grep $PATTERN|sort)
			for f in $HISTACTIVE; do
				printf '%s\n ' "$HISTDIR/$f"		
			done
		}
		function history_histfiles_active ()	{
			ACTIVE=$(pgrep "$(ps -p $$ -o comm=)")
			PATTERN=$(for pid in $ACTIVE; do echo -n "-e .*session*\.${pid}.* "; done)
			HISTACTIVE=$(ls $HISTDIR 2>/dev/null | grep $PATTERN|sort)
			for f in $HISTACTIVE; do
				printf '%s\n ' "$HISTDIR/$f"		
			done
		}
		history_sessions_active
		history_histfiles_active
		unset -f history_sessions_active history_histfiles_active
	}
	function history_show()	{
		builtin history -c	
		install -m 777 /dev/null "$HISTSYSUNIQ"
		install -m 777 /dev/null "$HISTFILE"
		cat "$HISTSYSFULL" >> "$HISTFILE"
		cat "$HISTSYSBOOT" >> "$HISTFILE"
		cat "$HISTSESSION" >> "$HISTFILE"
		cat "$HISTFILE" | history_uniq > "$HISTSYSUNIQ"
		cat "$HISTSYSUNIQ" | history_uniq > "$HISTFILE"

		builtin history -r "$HISTFILE"
		
	}
	function history_date_stamp() 	{		
		dat=$( printf '%s' "$( date +%s )" )
		usr=$( printf '%s' "$USER" )
		hst=$( printf '%s' "$HOSTNAME" )
		tty=$( printf '%s' "$$" )
		printf '#<ID>  %s    %s@%s : %s </ID>#' "$dat" "$usr" "$hst" "$tty" 
	}
	function cleanup(){
		# functions
		unset -f  HELP history_install history_cleanup history_session_prep 
	}
	local __FNC HISTPFIX DATE BOOT APID HISTACTIVE HISTDATE HISTBOOT HISTPFIX 
	local HISTCACHEDIR HISTSYSUNIQ HISTSYSBOOT

	__FNC=${FUNCNAME[0]}
	HISTDATE="$( date +%s )"
	HISTBOOT="$(uptime -s | tr -d '\-: ')"
	HISTSIZE=-1 
	HISTPFIX="history"
	HISTFILESIZE="$HISTSIZE" 
	HISTCONTROL=''
	HISTCACHEDIR="/var/cache"
	HISTDIR="${HISTCACHEDIR}/history/bash"
	HISTLASTCMD="${HISTDIR}/system.last.${HISTPFIX}"
	HISTFILE="${HISTDIR}/${HISTPFIX}.$$"
	HISTSESSION="${HISTDIR}/${HISTPFIX}.session.$$"
	HISTSYSBOOT="${HISTDIR}/${HISTPFIX}.boot.${HISTBOOT}"
	HISTSYSFULL="${HISTDIR}/system.full.${HISTPFIX}"
	HISTSYSUNIQ="${HISTDIR}/system.uniq.${HISTPFIX}"


	case "$1" in
		install) history_install ;;
		cleanup) history_cleanup ;;
		prep) history_session_prep ;;
		start) history_session_start ;;
		stop) history_session_stop ;;
		update) history_update ;;
		uniq) shift && history_uniq "$@" ;;
		active) history_active ;;
		orphaned) history_sessions_orphaned ;;
		show) shift  && history_show "$@" ;;
		stamp) history_date_stamp ;;
	esac
	cleanup

}	
function HISTCLEANUP() {
  echo "Cleaning up HIST files..."
  bash_history stop
  sleep 0.1
}

function HISTUPDATE() {
	bash_history update 
}
function history(){
	bash_history show
	builtin history "$@"
}

trap HISTCLEANUP  EXIT
bash_history start
[[ "${PROMPT_COMMAND}" != *"HISTUPDATE"* ]] && export PROMPT_COMMAND="HISTUPDATE ; ${PROMPT_COMMAND}"


